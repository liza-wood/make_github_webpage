[["index.html", "Making websites with Rmd &amp; GitHub Overview", " Making websites with Rmd &amp; GitHub Liza Wood 2023-06-16 Overview 9-9:30 Check in on set-up (please try to complete all set-up ahead of time!) 9:30-10:30 GitHub – setting up a project and code workflow 10:30-10:45 Break 10:45-11:30 Rmd – constructing pages for website 11:30-12:30 Website ingredients – turning Rmd into a renderable sit 12:30-1:00 Lunch break 1:00-2:00 Rendering – publish the site and refine "],["set-up.html", "1 Set-up 1.1 R + RStudio 1.2 git 1.3 GitHub 1.4 SSH", " 1 Set-up Before we get started with this workshop, please make sure to (at least try to) complete the following steps so that we can be as set up as possible. Install R and RStudio Install git Sign up for GitHub account Set up SSH key between computer + GitHub 1.1 R + RStudio R and RStudio are separate downloads and installations. R is the underlying statistical computing environment. RStudio is a graphical integrated development environment (IDE) that makes using R much easier and more interactive. You need to install R before you install RStudio. Download and install both of these but in this order: R: Get the most current version version appropriate for your machine. It’s free. RStudio: This IDE is a great platform to work with R (note you need R before you can use RStudio). Please install the most recent version. It’s free and does lots of cool things. 1.2 git Git is a ‘source code management’ software that, well, helps manage your source code. Importantly, it is a powerful version control software that can help you keep track of your workflow. It also interacts with GitHub, which is where we’ll really have fun with building webpages. Follow this link to install git onto your computer. There will be separate instructions for Mac and Windows Operating Systems. Note for everyone: When installing git on your computer, please do not change the installation location! The default installation location is what you want, and if during the installation you click something like “Change Install Location”, it will mess everything up Note for Mac OS: There are several options for installing git, and I recommend following the first set of instructions. These are to 1) install Homebrew and then 2) use Homebrew to install git. You will be running these commands in your ‘Terminal’. If you have never used your Terminal before, search for it using your Mac search box. You should open up a window that looks like this: 1.3 GitHub Register for a free individual GitHub account. I recommend doing this with your @ucdavis.edu email, since that will allow you to request the Student Developer Pack. This will give you unlimited private repositories, among other goodies. Otherwise, any email will do. This is where we will be hosting our webpages, and your webpage name will be directly linked to your username. So please reflect on that as you choose a username, particularly if this is a webpage you plan to use for a scholarly profile. 1.4 SSH Once you have successfully downloded git and signed up for GitHub, we have one last task: link your local computer to your GitHub account by setting up an SSH key. To check that you have downloaded git, you can open up your Terminal on Macs, or Git Bash on Windows. In that window, type the following code: which git The response from your terminal prompt should look something like this (not exact is okay, mostly a response is what matters): /usr/local/bin/git GitHub has put together instructions on how to set up your SSH key, and you will need to do this through Terminal/Git Bash. You will want to make sure you do the following: Generate an SSH key. One strong recommendation is to NOT set a passphrase when prompted in Step 3. So when you are prompted for a passphrase, simply press the Enter key twice without pressing any other keys. Add the SSH key to ssh-agent. If you did not set a passphrase, pay special attention to the blue boxes in Steps 2 and 3. Add the new SSH key to your account. If you follow these steps, you should be all set! If you get stuck here, hang tight and we will try to walk through this together at the start of the workshop "],["project-management-git-and-github.html", "2 Project Management, git, and GitHub 2.1 Organizing RStudio with projects 2.2 git as local version control 2.3 Connecting remotely to GitHub", " 2 Project Management, git, and GitHub This section is going to introduce us to to major pieces of the puzzle for building a webpage. These skills are also incredibly relevant to working in R more generally, so if you can understand these components and how they relate, you’re well on your way to have streamlined management practices in R. We are going to talk about 1) R Projects, 2) git, and 3) GitHub. 2.1 Organizing RStudio with projects Here we are just going to get set up with an R Project that will be a strong base for any kind of research project, website building included. This set up will be exclusive to your desktop – no need to involve GitHub here if you don’t want. 2.1.1 Where am I? Getting to know your file paths One of the first things useful to know when you open up RStudio is: where am I in my computer? You get answer this by running the getwd() function to find your working directory, like this: getwd() A working directory is where your RStudio session is operating from (i.e. its home base) at that moment. The answer to getwd() will be unique to your computer, and might vary quite greatly for folks who are not in an R Project (more on that soon). If you are not in an R Project, you can set your default working directory under Tools &gt; Global Options. This is then the very first default that you can set. Before we get into projects, we want to make sure we understand how to navigate around our computer using file paths. File paths are the sequence of folders (also called directories) that tell your computer where to find a certain file. So when you open a finder and click through different folder images or names to find and end destination, you are navigating along a particular file path. When we code, instead of clicking we want to guide R into the right directory using the path name. There are 2 basic kinds of file paths: Absolute: Absolute paths list out the full file path, usually starting with your username, which you can also refer to using the shortcut ~. So instead of C:/MyName/Documents or /Users/MyName/Documents, you can type ~/Documents. But generally, the only place an absolute path will work is your computer. It will break on anyone else computer, or anytime you move or rename something. Relative: Relative paths are relative to your working directory. So if R thinks we’re in that ~/MyName/Documents/Projects/2023 folder, and we want to access a file in a folder inside it called data, we can type data/my_file instead of ~MyName/Documents/Projects/2023/data. Check in It can be fun to experiment a little with file paths to understand where you are. First, any time you open up quotation marks, R might think you are prompting it with a file path. So if you open up quotation marks and put your cursor inside, it will prompt you with the next files in line, relative to your working directory. Fun note is that you can continue to move deeper and deeper into a file path with the help of tab completion. And you can also move back out of a file path with two periods ../. This signals to your computer that you want to back up instead of move forward along your file path, then you can choose to take another road 2.1.2 “File paths feel complicated” [Enter R projects] One of the great advantages of using tools like RStudio is they make it easy to use an organized ‘project’ workflow. What do we mean by ‘using projects’? Projects refer to a general pattern or structure used for each work project or analysis. This approach is not specific to R. Any practiced data scientist will use a folder structure and organization scheme, no matter what programming language they use. We’ll get to that in a minute. What is special in RStudio is that projects also positions your working directory in a folder, which you can then use as your home base to organize the project folders around. Let’s make a project and organize folders around it. To start a new project, we want to follow the File &gt; New Project option in RStudio. We’re going to start by selecting the New Directory option. Next, we’re going to select the New Project option. Take a look around before you do to notice how many different options there are! All sorts of templates! These can be great places to start for all sorts of activities – building a web page, a Shiny App, etc. But for now we are going to start without any bells and whistles. Once in that new project, we need to give the directory (folder) a name. For the sake of this workshop, we are going to give our project directory the same name as what will eventually be our web page repository. In most cases what you name the directory doesn’t matter, but here we will try to be exact. Name the repository your-github-username.github.io. So for example, my github user name is liza-instructor, so my directory will be called liza-instructor.github.io. Now, in the R Project, we can again ask R to report our working directory with getwd(). This time, your answer should be different. If set up correctly, your working directory should not be the folder created by the project. What this means is that everything you do inside this project (i.e. you open this project when you open your R session) will be relative to your project working directory. This is powerful because now all of the file paths you use will be relative. When setting up a project, the general idea is to always use the same structure and naming schemes across every project. For a research project, you should typically have a couple files and folders, including README.md, script, figures, and maybe data, depending on your data storage needs. For a web page, we’re going to do something a little different. For now, we should all create/save a script called ‘workshop_notes.R’. This can be saved in our website repository, even though it won’t be part of our webpage, eventually. But it can be a useful place for us to store notes and experiment. 2.2 git as local version control Next, we’re going to review how git works. It is important to recognize that git is a software on its own that doesn’t need GitHub to operate as version control. You can use git on different projects without ever connecting to GitHub, just to monitor your work ‘locally’ (on your computer). Now, if you looked closely when you were setting up your project, there was an option to check the box saying: Create a git repository. That would accomplish what we’re about to do. But instead of just checking the box, we are going to dig in deep by using git in the Terminal in order to really understand what git is and how to use it. So, tab over to the Terminal in RStudio, which should be next to your Console tab You want to make sure to see two things. First, is there a dollar sign ($) starting your prompt? Second, is the project name somewhere in your prompt? For example, my prompt reads: (base) lwmbp:liza-instructor.github.io lizawood\\$. This is the name of my computer (lwmbp), the name of my project (liza-instructor.github.io) and my username (lizawood). If that isn’t happening for you, check your your Tools &gt; Global options &gt; Terminal and take a look at the first two settings. Your ‘Initial directory’ should be set to ‘Project directory’ and ‘New terminal open with’ should be ‘Bash’ for Macs or ‘Git Bash’ for Windows. If you’re all set in Terminal, not we want to initiate git! What this means is that we want the git software to begin tracking the changes made within this project folder (and the subfolders we will eventually store in the project folder). We initialize git by typing the following command, git init in Terminal and pressing Enter. git init You should get a message with several details, as along these lines: hint: Using &#39;master&#39; as the name for the initial branch. This default branch name hint: is subject to change. To configure the initial branch name to use in all hint: of your new repositories, which will suppress this warning, call: hint: hint: git config --global init.defaultBranch &lt;name&gt; hint: hint: Names commonly chosen instead of &#39;master&#39; are &#39;main&#39;, &#39;trunk&#39; and hint: &#39;development&#39;. The just-created branch can be renamed via this command: hint: hint: git branch -m &lt;name&gt; Initialized empty Git repository in /Users/lizawood/Documents/R-Projects/liza-instructor.github.io/.git/ We will focus right now on the bottom-most line: You’ve initialized a repository! So, now let’s talk about what git does. Let’s save our workshop_notes.R script then ask git what it is up to with the following commands in Terminal: git status What do we get? (base) lwmbp:liza-instructor.github.io lizawood$ git status On branch main Your branch is up to date with &#39;origin/main&#39;. Untracked files: (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) .Rproj.user/ liza-instructor.github.io.Rproj workshop_notes.R no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) This report is telling us that we have untracked files. Meaning – git has not yet ‘tracked’ or recorded the files we have in our Project. Namely, the workshop_notes.R looks familiar. But what is that other stuff? We really don’t want to concern ourselves with this much, because this is just session information about our users. But instead of just mentally ignoring it, we can actually tell git to ignore it using a .gitignore file. Open a plain text file, and then inside that text file you can name the types of things you want git to ignore. In our case, this is ‘.Rproj.user’. Note that you can use this ignore file for all sorts of things. If you have some secret code you’re not ready to share, or a big data folder that won’t fit on git. This is one way to keep parts of your project ‘hidden’ from git. But for now we are just going to use it to keep out unwanted clutter that goes on in R’s background. If you get a warning about saving, go ahead and do it anyways. Now, we can ask Terminal for the git status again, we see what’s changed: (base) lwmbp:liza-instructor.github.io lizawood$ git status On branch main Your branch is up to date with &#39;origin/main&#39;. Untracked files: (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) .gitignore liza-instructor.github.io.Rproj workshop_notes.R no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) Now it is tracking our gitignore file but nor our Project user info. So, now we can get into action. We want to use git to track our edits on RStudio. To get git to do that, we need to do two steps: 1) “Stage” files for tracking by “adding” them, and 2) “Committing” files to git’s version control memory. We are going to do this with two main git commits. First, we want to ‘stage’ for commit with the git add command in Terminal. But we need to specify what to add. You can add file by file by including their name. For instance, we can try: git add workshop_notes.R Then when we check our git status, we see something new. Now workshop_notes.R has moved to a new category: Changes to be committed, while .gitignore is still in the Untracked files. (base) lwmbp:liza-instructor.github.io lizawood$ git status On branch main Your branch is up to date with &#39;origin/main&#39;. Changes to be committed: (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage) new file: workshop_notes.R Untracked files: (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) .gitignore liza-instructor.github.io.Rproj More often than not, I want to add all of my untracked files at once. So instead of listing them out one by one, we can use file path speak for “take them all”, which is the period (.). git add . Now we have added all untracked files. You can check git status again to verify. Next, we want to complete step two: commit the tracked changes. We will do this with the git commit command in Terminal. But we also need to include a message when we commit, which will be associated with the commit. To do this we need to append the -m flag to the command, and write the message in quotations. Like this: git commit -m &#39;first commit&#39; When you commit, all sorts of data will be attached. The files, the time, the edits. So messages are (ideally) sharing information about the changes or activity that is not already reflected by the files the message is associated with or the time of the commit. What this commit does is essentially puts a pin in your work. It saves a version of that work to the git version control software – you’ll see when you commit that you’ll get a short summary and an ‘id’ number associated with that commit. This version of your work is not stored in git. Woo hoo! 2.2.1 Check in We did this in a drawn out way, but the key take-aways are that you should be adding and committing on a regular basis. I generally like to add and commit work at the end of the day, but if I am working on a project where I am adding and deleting and trialing several ideas, I will add and commit before I delete or trial something major. All the git status and .gitignore things aside, you’ll mainly want to remember the two steps: git add . and git commit -m 'write a message'. Make a change to your ‘workshop_notes.R’ file, save it, and go through these two steps: git add . git commit -m &#39;updating notes&#39; Now we can use another command in the Terminal, git log --oneline to see a one line report out of the activity that has taken place. 2.3 Connecting remotely to GitHub Now, we have a project set up so we have a good home base for our working directory. We’re set up with git so that it is tracking our every move. Now, we want to connect this workflow to the internet. If you were working on a research project, this connection would be to serve as a cloud backup, potentially a public-facing demonstration of your work, and open up possibilities for code collaboration. With the project we’re going to make today, connecting to GitHub will allow us to not only have public-facing work, but have the work be hosted on a site that we create. It is worth taking a moment to take stock of a nice good image that helps us understand git, and its relationship to GitHub. So far we have done the lower, ‘local’ part of this image. We’ve set up a local working directory via our R Project, then connected that to a local ‘repository’, which is how git houses the versions we make, which are intimately linked to your project. We have staged and committed changed to the local repository. And now we want to push and pull up to a a remote (internet) repository. 2.3.1 Create a remote repository To create a remote repository on GitHub, we will need to navigate to our GitHub profiles, and make it to your repositories tab. Once on that page, select the green button on the right of the screen that signals you want to make a new repository. Now, you get to name your repository! If you were doing a research project, this could describe that project. Typically, I make repositories and R Projects with the same name, and only have one project per repository. For the website, the name of the repository is really important because it influences how GitHub will host the site. So follow the exact format for your repository name: .github.io. So for instance, mine is ‘liza-instructor.github.gio’. It looks redundant, but please do it. For now we will leave all the other settings blank, since we are going to connect to our existing repository that we have already initiated locally. Click ‘Create repository’ at the bottom, and you should be taken to a set-up page. GitHub provides several instruction for set-up. We are going to follow the option ‘…or push an existing reppository from the command line’ because we have already created our local repository. We don’t need to initiate a new one. We are going to follow those instructions in the command line (Terminal). These instructions walk you through three steps, two of which you won’t need to do again. 1. In the first line git remote add origin you are creating a tether between your local repository (‘repo’) and the remote repo on GitHub. Once you’ve add the remote origin link to your local repo, you don’t need to do it again. Second, git branch -M main, we are specifying the name of our main branch. We won’t get into branching for this workshop, but know that one of the several functionalities of git and collaborating on GitHub are branches. If you think of a project as a tree, you can create a branch to work on something ‘on the side’ to experiment. Once it is done, you can merge that branch into the main branch… this is largely for collaborative purposes. So for now, you’ve establshied that your git branch main git branch -M is called ‘main’. Last, you have told git to ‘push’ your commited changes up to GitHub. This is the command that links your local repository to the remote repository. It know where to go because of step 1 – you’ve given it the URL to your project on the internet, essentially. You’ve also been very specific about whether what branch you are pushing to ‘upstream’ -u origin main. From now on, if you aren’t working with branches, you only need to git push – no need to specify the origina of the branch. There’s a lot going on here, but you can reference a little git cheat sheet by just typing the command git into the Terminal. You will be provided with several git commands and ‘flags’ (what those dash and letters mean). 2.3.1.1 Check in So what have we done? Started a project in RStudio. Initialized a local git repository with in that project folder using the git init command in Terminal. Created a remote GitHub repository and then linked the local and remote repositories in Terminal. ** Check your GitHub webpage to see the updates have been pushed in real time**. If they have, you’re all set.Now within our project, we can save and updates files, and as we do, follow the three key steps to keep our local and remote repositories tracking our work and in sync with one another: git add . git commit -m &#39;message&#39; git push I’m generally finishing my day with these steps to keep a log of my work. 2.3.2 Do it all in reverse Once you understand each of the steps we walked through in the previous sections, it is important to understand that you can mix up that order of operations. In fact, it is quite common for folks to do it all in reverse: Create a remote repository in GitHub. ‘Clone’ that to a local repository while simultaneously generating an R Project in RStudio. What does that look like? We can provide a little glimpse with a practice repository. First, you’ll want to start a new repo in GitHub. When you do this, you can now create certain settings, like adding a README and adding a .gitignore file that is templated for RStudio, so that those items exist right from the start. Once we’ve created that repository, you’ll want to follow the green ‘Code’ button to the right of the options on the repo. When you open that, you should copy the SSH URL to use when you create a new project Then in RStudio, we can File &gt; New Project but this time we will follow the Version Control path and select the Git option. You’ll then be prompted to paste in a Repository URL. This is where you paste in the SSH URL copied from GitHub. In some cases, the directory name automatically fills in with the repo name from GitHub. In other settings, you may need to type it. This will be the name of your projects’ directory. Last, you just have to click Create Project, and your repository from GitHub will be ‘cloned’ as a local repository, and the tether will be established so you can add, commit, and push all you want! "],["rmd.html", "3 Rmd 3.1 Markdown 3.2 Markdown + R = RMarkdown (or Rmd) 3.3 Let’s make some webpage Rmds 3.4 Check in", " 3 Rmd This section is going to introduce us to to RMarkdown, the file type we’ll be using for each ‘page’ of our webpage. RMarkdown is a great tool beyond webpages, as it allows you to generate integrated text and code reports in different formats, usually HTML for web viewing or PDFs. In the following sections we’ll introduce 1) Markdown and 2) Combining markdown with R for RMarkdown. 3.1 Markdown Markdown is a ‘markup’ language to add formatting elements to plain text documents. This means that we can add format to documents we are creating by knowing the right codes. One of the most common kinds of basic markdown files are README files. In R and GitHub, you are encouraged to create a README document to record relevant information (or metadata) about a certain R project/Git Repository. For our webpage repository, we should only have the notes R script that we’re working on. Let’s make a README markdown. Open up a blank markdown file by following: File &gt; New File &gt; Markdown File. Inside this markdown file we can write up a brief summary of this repository and practice some of the markdown skills. There are several markdown cheat sheets out there that you can search to wrap your head around the basics of the language. Though admittedly, RStudio updates recently have been getting so fancy that you hardly need to learn markdown anymore. If you toggle over the ‘Visual’ pane, you can see and edit the document as you would a Word document. Toggle back over to the Source viewer and you’ll see how the markdown language was embedded. Let’s save this file with the name README.md. GitHub knows to look for markdown files with this name, and when it sees them, it knows to publish them as your repository’s splash page. Once you save your README.md practice our pushing steps up to GitHub: git add README.md git commit -m &#39;adding README&#39; git push You should see the changes reflected on your GitHub webpage: 3.2 Markdown + R = RMarkdown (or Rmd) RMarkdown files, which will be the focus of what we work with today, are Markdown files in which you can embed R code (and other languages too!). Let’s open up a file and see how this works: File &gt; New File &gt; R Markdown. For now, let’s just give this file the title ‘Test’ and click Okay to open up an HTML version of Rmd. Remember we said that Rmds can ‘render’ in many formats, such as PDF, Word, as Shiny Apps and/or Beamer presentations. We’ll stick with the default HTML just to introduce ourselves to Rmd and walk through some of its basic components. 3.2.1 Mixing markdown text and code The template provided by the Rmd document gives an examples of how to embed text and code. There are two text sections, indicated using the pound sign (#), and some text that has some formatting like bolding and embedding links. There are also 2 code ‘chunks’ opened by three back ticks, curly brackets, the letter r, then closed out by three back ticks. You can create a new code chunk by selecting the green C icon in the top right of your Rmd or with the key combination: Cmd/Ctrl + Alt/Opt + i. Within each chunk, you can insert code, as well as optional ‘chunk options’. A cheat with these chunk options, and more Rmd hints, is here. You can insert chunk options as follows: \\```{r chunk name, echo = F, fig.align = &quot;center&quot;, warnings = F} summary(cars) \\``` Let’s go ahead and click the ‘Knit’ icon to ‘render’ this document to see what our out looks like, and then we can discuss some of the added features that help knitting happen. 3.2.2 The YAML YAMLs are part of the guiding architecture for your Rmd file, located at the very top, indicated by three dashes to begin and end, and it can contain a series of information bits about the markdown document in between. Most important for us is the output, which tells R the format to ‘render’ the document. (As it turns out, YAML means either ‘yet another markup language’ or ‘YAML ain’t a markup language’, which seems to involved a series of computer programmer jokes that I am not advanced enough to know the history behind). Beyond the basics that typically start in this default, what goes in a YAML also depends on the kind of output you have. We’ll just flag this here, because the yaml will become an important feature of the webpage. Here is a nice ‘field guide’ for YAMLS, and it is worth noting that knitting to a PDF may require installations and management of LaTeX on your computer, which we don’t do today. 3.2.3 Setup chunk The next thing I want to call attention to is the setup chunk. The Rmd template inserts this to flag good practice when setting up an Rmd. Here are two kinds of options that you can set for all of your chunks with the knitr package. The one displayed in the default is for default chunk options. So things like: do you always want echo to be T, figures to be centered, etc. You can include all of these defaults here, and still override them in individual chunks if need be. So for example: \\```{r chunk setup, include=FALSE} knitr::opts_chunk$set(echo = TRUE, fig.align = &#39;center&#39;, warning = FALSE) \\``` The second kind of default you can set up, which becomes important when you start trying to read in data from other sources, is the default knit options. My default, because we’ve set up an RProject, your working directory should be the project directory. So this step may be unnecessary. But if you find yourself not being in the right place, or wanting to source data from elsewhere, you can set the working directory for every chunk with the following code: \\```{r knit setup, include=FALSE} knitr::opts_knit$set(root.dir = &#39;path/to/desired/wd&#39;) \\``` 3.3 Let’s make some webpage Rmds We are going to practice working with R Markdown files by drafting up two pages of our website. Let’s try to make an “About” page and a “Research” page, just for practice. Here’s some guidance. 3.3.1 Make an ‘About’ page First, let’s open a new R Markdown file, title it “About”, and importantly, let’s save it right away with the name ‘about.Rmd’. The names that we assign to our markdown files will be important for our website index shortly. Let’s use this page primarily as a space for practicing Markdown (i.e. maybe don’t use code here). Write up a brief summary profile, and you may want to use some formatting features. You can do this in Markdown yourself or toggle over to the Visual option and use those features. Some of the things you may want to do include: Linking content. You can link content in text by… Embedding images. This can be done one of several ways. If the photo is already hosted somewhere online, you can embed it as a link (see cheat sheet). If it is a document on your computer, you can create a new folder in your project, called something like ‘img’, and add in photos to this folder. Once you do that, you can source this image either ‘inline’ with markdown, with the following code right in your text area (), or as part of a chunk, demomtrsated below. Note that playing around with sizing and location will take some searching online. This is the time to start experimenting! \\```{r} knitr::include_graphics(&quot;img/photo.png&quot;) \\``` 3.3.2 Make a ‘research’ page To practice embedding code into a page, also try to make some kind of research page. If you want to practice with data that is based in R, I’d encourage you to install the palmerpenguins package and work with library(palmerpenguins) data to play around. Some hints can be found on this tutorial. If you have your own data you’d like to work with, this is a good time to get organized in your working directories. Data management on GitHub can be tough. On this public repository, you likely don’t want to place and upload your research data into a data folder for anyone to see. Be careful here! Here are two recommendations: Create a data folder and immediately add it to your .gitignore. You should open your .gitignore file and add the following line (under what we’ve already added for the Rproj.) .Rproj.user data/ This should set you up so that git is never tracking your data, and it won’t be pushed to GitHub when you push your other files, even if you ask git to add ‘all’ of the files with git add .. Get yourself organized with Box Drive, Google Streaming, or whatever cloud service you work with. Most cloud services have ways of getting data from the cloud right into R. If you work with Box, I recommend downloading Box Drive, which then allows you to create a filepath straight to Box in R. Alternatively if you are a Drive person, your can use the googlesheets4 package. Once you have your data decision (built in R data like penguins, or your own data), try using it to write something up. Check out some of the options for formatting on pages like this: * Pimp my Rmd * Rmd Cookbook * For example, add tabs within a page 3.3.3 Knitting each file After we’ve taken some time to develop drafts of these two pages and experiment with various markdown features, let’s get those drafts knitted. In fact, you will likely benefit from knitting often so that if something is breaking the knit, you can catch it earlier rather than later. tl;dr knit early and often. As you knit, notice that a second file is created in your directoy: the HTML version of the Rmd. It has the same name as the file, but now it has a .html extension. You can open that in your web browset to see how it renders, but if you look at the file itself it will just be a load of HTML (hard to actually read). If your knitting is broken: * Read the error. Often the error message will call attention to the line in the document that is breaking the knit. If it is in within a code chunk, it will point to the first line in the code chunk that is breaking. * If it is the code, common challenges may have to do with getting your working directory and file paths correct, and/or having code out of order. When your Rmd knits it starts fresh, from the top. So all relevant objects need to be available to R in the order that the code runs, from top to bottom. * Don’t name two different code chunks with the same name. For example, don’t have 2 chunks called setup. Each name needs to be unique. 3.4 Check in The next section now build out this repository to make it ready for actually being a website! Before we get into that, let’s make sure we all have the same files in our directories. Your Files pane should look a lot like this: You want your .gitignore, Rproj, README.md, and the Rmds and HTML versions of your pages. Once we all have that we can move on to converting this directory to be website-ready. "],["basic-webpage-ingredients.html", "4 Basic webpage ingredients 4.1 1. Site YAML 4.2 Index 4.3 Pages 4.4 Styling 4.5 Rendering", " 4 Basic webpage ingredients In this section we are going to go over how to take a typical R Project directory and make it ready to be rendered with GitHub Pages. 4.1 1. Site YAML We learned about YAMLs when we talked about Rmds: Every Rmd has a YAML that helps guide the knitting process, providing document metadata and knitting architecture. Add in the output dir 4.2 Index Index is your splash page 4.3 Pages These are your Rmd files, where each file is a oage 4.4 Styling 4.4.1 HTML 4.4.2 CSS 4.5 Rendering "],["blogdown-bookdown.html", "5 Blogdown &amp; bookdown", " 5 Blogdown &amp; bookdown "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
